@{
    ViewData["Title"] = "📒Attendance";
}
@model List<appdev_final_req.Models.Entitiess.Event>

<style>
    :root[data-bs-theme='light'] {
        --page-bg: #ffffff;
        --text-color: #212529;
        --card-bg: #ffffff;
        --table-header-bg: #e3f2fd;
        --table-border: #dee2e6;
        --link-color: #0d6efd;
        --border-color: #dee2e6;
    }

    :root[data-bs-theme='dark'] {
        --page-bg: #212529;
        --text-color: #ffffff;
        --card-bg: #1e1e2f;
        --table-header-bg: #2c3e50;
        --table-border: #6aa5f8;
        --link-color: #6aa5f8;
        --border-color: #2a2a2a;
    }

    body {
        background-color: var(--page-bg);
        color: var(--text-color);
        font-family: 'Poppins', sans-serif;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    h1, p {
        text-align: center;
    }

    .table {
        background-color: var(--card-bg);
        color: var(--text-color);
        border: 1px solid var(--table-border);
    }

    .table th {
        background-color: var(--table-header-bg);
        color: var(--text-color);
        border: 1px solid var(--table-border);
    }

    .table td {
        background-color: var(--card-bg);
        color: var(--text-color);
        border: 1px solid var(--table-border);
    }

    .form-control, .btn {
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    a {
        color: var(--link-color);
    }

    .pagination .page-link {
        background-color: var(--card-bg);
        color: var(--link-color);
        border: 1px solid var(--border-color);
    }

    .pagination .active .page-link {
        background-color: var(--link-color);
        color: #fff;
        border-color: var(--link-color);
    }
</style>

<h1>@ViewData["Title"]</h1>
<p>Mark members' attendance according to events here.</p>

<div>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <form class="d-flex" role="search" method="get" asp-action="List">
            <input class="form-control me-2" type="search" name="search" placeholder="Search" value="@Context.Request.Query["search"]" />
            <button class="btn btn-outline-primary" type="submit">🔍</button>
        </form>
    </div>

    <table class="table table-bordered rounded-2 mt-4" id="eventsTable">
        <thead>
            <tr>
                <th onclick="sortEventsTable(0)">Event Title <span id="eventSortIcon0" class="sort-icon"></span></th>
                <th onclick="sortEventsTable(1)">Event Date <span id="eventSortIcon1" class="sort-icon"></span></th>
                <th class="text-center">View File</th>
            </tr>
        </thead>
        <tbody id="tableBody">
            @foreach (var eventz in Model)
            {
                <tr>
                    <td>@eventz.Title</td>
                    <td>@eventz.EventDate.ToString("MMMM dd, yyyy")</td>
                    <td class="text-center">
                        <a class="btn btn-primary btn-sm" asp-controller="Attendance" asp-action="MarkAttendance" asp-route-id="@eventz.Id">
                            📋
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination Controls -->
    @if (ViewBag.TotalPages > 1)
    {
        <nav class="d-flex justify-content-center mt-3">
            <ul class="pagination" id="paginationControls">
                
                <li class="page-item @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
                    <a href="#" class="page-link" onclick="loadPage(@(ViewBag.CurrentPage - 1)); return false;">Previous</a>
                </li>

                @* Always show first page *@
                <li class="page-item @(ViewBag.CurrentPage == 1 ? "active" : "")">
                    <a href="#" class="page-link" onclick="loadPage(1); return false;">1</a>
                </li>

                @* Left Ellipsis *@
                @if (ViewBag.CurrentPage > 6)
                {
                    <li class="page-item disabled"><span class="page-link">...</span></li>
                }

                @* Pages around current (±5) *@
                @for (int i = ViewBag.CurrentPage - 5; i <= ViewBag.CurrentPage + 5; i++)
                {
                    if (i > 1 && i < ViewBag.TotalPages)
                    {
                        <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                            <a href="#" class="page-link" onclick="loadPage(@i); return false;">@i</a>
                        </li>
                    }
                }

                @* Right Ellipsis *@
                @if (ViewBag.CurrentPage < ViewBag.TotalPages - 5)
                {
                    <li class="page-item disabled"><span class="page-link">...</span></li>
                }

                @* Last Page (only show if > 1) *@
                @if (ViewBag.TotalPages > 1)
                {
                    <li class="page-item @(ViewBag.CurrentPage == ViewBag.TotalPages ? "active" : "")">
                        <a href="#" class="page-link" onclick="loadPage(@ViewBag.TotalPages); return false;">@ViewBag.TotalPages</a>
                    </li>
                }

                <li class="page-item @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">
                    <a href="#" class="page-link" onclick="loadPage(@(ViewBag.CurrentPage + 1)); return false;">Next</a>
                </li>
            </ul>
        </nav>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let eventSortDir = {};
        let lastSortedEventCol = null;

        function sortEventsTable(colIndex) {
            const table = document.getElementById("eventsTable");
            const tbody = table.tBodies[0];
            const rows = Array.from(tbody.rows);

            eventSortDir[colIndex] = !eventSortDir[colIndex];

            rows.sort((a, b) => {
                const aText = a.cells[colIndex].textContent.trim().toLowerCase();
                const bText = b.cells[colIndex].textContent.trim().toLowerCase();

                // Sort as dates if column is Event Date
                if (colIndex === 1 && !isNaN(Date.parse(aText)) && !isNaN(Date.parse(bText))) {
                    return eventSortDir[colIndex]
                        ? new Date(aText) - new Date(bText)
                        : new Date(bText) - new Date(aText);
                }

                return eventSortDir[colIndex]
                    ? aText.localeCompare(bText)
                    : bText.localeCompare(aText);
            });

            rows.forEach(row => tbody.appendChild(row));

            if (lastSortedEventCol !== null && lastSortedEventCol !== colIndex) {
                document.getElementById(`eventSortIcon${lastSortedEventCol}`).innerHTML = '';
            }

            document.getElementById(`eventSortIcon${colIndex}`).innerHTML = eventSortDir[colIndex]
                ? '<i class="bi bi-caret-up-fill"></i>'
                : '<i class="bi bi-caret-down-fill"></i>';

            lastSortedEventCol = colIndex;
        }

        function loadPage(page) {
            const search = document.querySelector('input[name="search"]').value;

            fetch(`/Attendance/List?page=${page}&search=${encodeURIComponent(search)}`, {
                headers: { "X-Requested-With": "XMLHttpRequest" }
            })
            .then(res => res.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                // Replace table body
                const newBody = doc.querySelector('#tableBody').innerHTML;
                document.getElementById("tableBody").innerHTML = newBody;

                // Replace pagination
                const newPagination = doc.querySelector('#paginationControls').innerHTML;
                document.getElementById("paginationControls").innerHTML = newPagination;
            });
        }
    </script>
}